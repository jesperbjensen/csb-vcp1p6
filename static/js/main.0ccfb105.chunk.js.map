{"version":3,"sources":["App.tsx","index.tsx"],"names":["StyleTable","data","style","tableLayout","map","user","textAlign","width","loading","src","avatar","height","borderRadius","alt","username","email","birthdate","toString","registeredAt","userId","StyleTableMemo","memo","FixedTable","styled","table","TableCell","td","AvatarImage","img","StyleComponentTable","StyleComponentTableMemo","CssTable","className","CssTableMemo","users","App","useState","currentTest","setCurrentTest","altTheme","setAltTheme","appClass","onClick","val","Array","from","length","forEach","push","faker","datatype","uuid","internet","userName","image","password","date","past","rootElement","document","getElementById","ReactDOMClient","render"],"mappings":"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","file":"static/js/main.0ccfb105.chunk.js","sourcesContent":["import \"./styles.css\";\nimport { faker } from \"@faker-js/faker\";\nimport styled from \"styled-components\";\nimport { memo, useState } from \"react\";\n\nexport function createRandomUser() {\n  return {\n    userId: faker.datatype.uuid(),\n    username: faker.internet.userName(),\n    email: faker.internet.email(),\n    avatar: faker.image.avatar(),\n    password: faker.internet.password(),\n    birthdate: faker.date.birthdate(),\n    registeredAt: faker.date.past()\n  };\n}\ntype User = ReturnType<typeof createRandomUser>;\n\nfunction StyleTable({ data }: { data: User[] }) {\n  return (\n    <table style={{ tableLayout: \"fixed\" }}>\n      <tbody>\n        {data.map((user) => (\n          <tr key={user.userId}>\n            <td style={{ textAlign: \"left\", width: \"20%\" }}>\n              <img\n                loading=\"lazy\"\n                src={user.avatar}\n                style={{ width: \"32px\", height: \"32px\", borderRadius: \"50%\" }}\n                alt={user.username}\n              />\n            </td>\n            <td style={{ textAlign: \"left\", width: \"20%\" }}>{user.username}</td>\n            <td style={{ textAlign: \"left\", width: \"20%\" }}>{user.email}</td>\n            <td style={{ textAlign: \"left\", width: \"20%\" }}>\n              {user.birthdate.toString()}\n            </td>\n            <td style={{ textAlign: \"left\", width: \"20%\" }}>\n              {user.registeredAt.toString()}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\nconst StyleTableMemo = memo(StyleTable);\n\nconst FixedTable = styled.table`\n  table-layout: fixed;\n`;\n\nconst TableCell = styled.td`\n  text-align: left;\n  width: 20%;\n`;\n\nconst AvatarImage = styled.img`\n  width: 32px;\n  height: 32px;\n  border-radius: 50%;\n`;\n\nfunction StyleComponentTable({ data }: { data: User[] }) {\n  return (\n    <FixedTable>\n      <tbody>\n        {data.map((user) => (\n          <tr key={user.userId}>\n            <TableCell>\n              <AvatarImage\n                loading=\"lazy\"\n                src={user.avatar}\n                alt={user.username}\n              />\n            </TableCell>\n            <TableCell>{user.username}</TableCell>\n            <TableCell>{user.email}</TableCell>\n            <TableCell>{user.birthdate.toString()}</TableCell>\n            <TableCell>{user.registeredAt.toString()}</TableCell>\n          </tr>\n        ))}\n      </tbody>\n    </FixedTable>\n  );\n}\nconst StyleComponentTableMemo = memo(StyleComponentTable);\n\nfunction CssTable({ data }: { data: User[] }) {\n  return (\n    <table className=\"table\">\n      <tbody>\n        {data.map((user) => (\n          <tr key={user.userId}>\n            <td className=\"table-cell\">\n              <img\n                loading=\"lazy\"\n                src={user.avatar}\n                className=\"avatar\"\n                alt={user.username}\n              />\n            </td>\n            <td className=\"table-cell\">{user.username}</td>\n            <td className=\"table-cell\">{user.email}</td>\n            <td className=\"table-cell\">{user.birthdate.toString()}</td>\n            <td className=\"table-cell\">{user.registeredAt.toString()}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\nconst CssTableMemo = memo(CssTable);\n\nlet users: User[] = [];\nArray.from({ length: 5000 }).forEach(() => {\n  users.push(createRandomUser());\n});\n\nexport default function App() {\n  let [currentTest, setCurrentTest] = useState<string | null>(null);\n  let [altTheme, setAltTheme] = useState<boolean>(false);\n\n  const appClass = altTheme ? \"AltTheme\" : \"App\";\n\n  return (\n    <div className={appClass}>\n      <div>\n        <button onClick={() => setCurrentTest(\"styled\")}>\n          Test style-tags\n        </button>\n        <button onClick={() => setCurrentTest(\"styled-component\")}>\n          Test style-components\n        </button>\n        <button onClick={() => setCurrentTest(\"css\")}>Test CSS</button>\n        <button onClick={() => setAltTheme((val) => !val)}>Switch Theme</button>\n      </div>\n      {currentTest === \"styled\" && <StyleTableMemo data={users} />}\n      {currentTest === \"styled-component\" && (\n        <StyleComponentTableMemo data={users} />\n      )}\n      {currentTest === \"css\" && <CssTableMemo data={users} />}\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport * as ReactDOMClient from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = ReactDOMClient.createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}